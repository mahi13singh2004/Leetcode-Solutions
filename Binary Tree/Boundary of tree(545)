bool isLeaf(TreeNode<int> *root){
    if(root->left || root->right) return false;
    return true;
}

void addleft(TreeNode<int> *root, vector<int>&ans){
    TreeNode<int> *curr=root->left;
    while(curr){
        if(!isLeaf(curr)) ans.push_back(curr->data);
        if(curr->left) curr=curr->left;
        if(curr->right) curr=curr->right;
    }
}

void addleaf(TreeNode<int> *root, vector<int>&ans){
    if(isLeaf(root)){
        ans.push_back(root->data);
        return;
    }
    if(root->left) addleaf(root->left,ans);
    if(root->right) addleaf(root->right,ans);
}

void addright(TreeNode<int> *root, vector<int>&ans){
    TreeNode<int> *curr=root->right;
    vector<int>temp;
    while(curr){
        if(!isLeaf(curr)) ans.push_back(curr->data);
        if(curr->right) curr=curr->right;
        if(curr->left) curr=curr->left;
    }

    for(int i=temp.size()-1; i>=0; i--){
        ans.push_back(temp[i]);
    }
}

vector<int> traverseBoundary(TreeNode<int> *root)
{
	vector<int>ans;
    if(root==nullptr) return ans;
    if(!isLeaf(root)) ans.push_back(root->data);
    addleft(root,ans);
    addleaf(root,ans);
    addright(root,ans);
    return ans;
}
