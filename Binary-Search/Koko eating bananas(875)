class Solution {
public:

    int maxi(vector<int>&piles){
        int maximum=INT_MIN;
        for(int i=0; i<piles.size(); i++){
            if(piles[i]>maximum){
                maximum=piles[i];
            }
        }
        return maximum;
    }

    int mini(vector<int>&piles){
        int minimum=INT_MAX;
        for(int i=0; i<piles.size(); i++){
            if(piles[i]<minimum){
                minimum=piles[i];
            }
        }
        return minimum;
    }

    bool find(int mid, vector<int>&piles, int h){
        long long time=0;
        for(int i=0; i<piles.size(); i++){
            time+=(piles[i]+mid-1)/mid;
        }
        if(time<=h) return true;
        return false;
    }

    int minEatingSpeed(vector<int>& piles, int h) {
        int ans=0;
        int start=1;
        int end=maxi(piles);
        while(start<=end){
            int mid=start+(end-start)/2;
            bool possible=find(mid,piles,h);
            if(possible){
                ans=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans;
    }
};
