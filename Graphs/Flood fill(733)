class Solution {
public:

    void dfs(int r, int c, vector<vector<int>>&image, vector<vector<int>>&ans, int newColor, int delrow[], int delcol[], int initial){
        ans[r][c]=newColor;
        int n=image.size();
        int m=image[0].size();
        for(int i=-1; i<=1; i++){
            for(int j=-1; j<=1; j++){
                if(abs(i)+abs(j)==1){
                    int n_r=r+i;
                    int n_c=c+j;
                    if(n_r>=0 && n_r<n && n_c>=0 && n_c<m && image[n_r][n_c]==initial && ans[n_r][n_c]!=newColor){
                        dfs(n_r,n_c,image,ans,newColor,delrow,delcol,initial);
                    }
                }
            }
        }
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int initial=image[sr][sc];
        vector<vector<int>>ans=image;
        int delrow[]={-1,0,+1,0};
        int delcol[]={0,+1,0,-1};
        dfs(sr,sc,image,ans,color,delrow,delcol,initial);
        return ans;
    }
};
